# -*- coding: utf-8 -*-
"""RealAgricultureDatasetAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tHz_ainCdCouBsHWiHrnfMmk8-uZVrHH
"""

import numpy as np
import pandas as pd
import seaborn as sns

"""#India's Agriculture Data Analysis

"""

df = pd.read_csv("Agriculture Data.csv", na_values="=")

df.head()

df.Crop_Year.unique()

df.dtypes



df.State_Name.unique()

df.Crop_Year.unique()

"""production is object ?????"""

df.dtypes

df.Season.unique()

df.Crop.unique()

pd.to_numeric(df.Production)
# here = was thought of one way of representing missing values....

df.dtypes
# now production is also float.....
# now production is float64

"""Finding null values..."""

df.Production.isnull().sum()

"""size of data ...

"""

df.shape

df.dropna(inplace=True)
# dropna will drop the null value from dataset .
# here previous columns for production data set was 246091 now
# it became to 242364 columns by minusing 3727 null values......

df.shape

"""##Which state is doing better production among other states?"""

sns.kdeplot(df.Production)
#Interquitile range is large ...

sns.boxplot(df.Production)
# Many outliers in dataset........

sns.boxplot(df.Area)
# Again many outliers .......

sns.kdeplot(df.Area)

df[df.State_Name == "Uttar Pradesh"]

df[df.State_Name == "Uttar Pradesh"]["District_Name"].unique()

"""#Ignoring district wisee because it will not give clear insight...
##Now, Taking => State, Crop, Crop_Year

"""

df.groupby(['State_Name', 'Crop', 'Crop_Year']).sum()

"""Checking the unique crop available in particular state .."""

df[df.State_Name == "Uttar Pradesh"]["Crop"].unique()

df.groupby(['State_Name', 'Crop_Year']).sum()

df_ = df.groupby(['State_Name', 'Crop', 'Crop_Year']).sum()

df_.reset_index(inplace = True)

df_.head()

df_[['State_Name', 'Crop_Year']].groupby("State_Name").count()

"""#Plotting for visualization ..

"""

sns.lineplot(x="Crop_Year", y="Area", data=df[df.State_Name == "Uttar Pradesh"])

sns.lineplot(x="Crop_Year", y="Production", data=df[df.State_Name == "Uttar Pradesh"])

#Not helpful
sns.lineplot(x="Crop_Year", y="Production", data=df, hue="State_Name");

!pip3 install plotly_express

import plotly_express as px

px.scatter(df_, x="Area", y="Production", animation_frame="Crop_Year",
           animation_group="State_Name", color="State_Name")

df_.sort_values("Crop_Year", inplace=True)

"""What contributing to large value of Kerala .."""

df_[(df_.State_Name == "Kerala") & (df_.Crop_Year == 2000)].sort_values('Production')

df[df.Crop.isin(['Rice', 'Wheat', 'Maize', 'Ragi'])]

"""Now Applying groupby ..."""

df_ = df[df.Crop.isin(['Rice', 'Wheat', 'Maize', 'Ragi'])].groupby(['State_Name', 'Crop_Year']).sum()

df_.head()

df_.reset_index(inplace=True)

df_.sort_values('Crop_Year', inplace=True)

px.scatter(df_, x="Area", y="Production", animation_frame="Crop_Year",
           animation_group="State_Name", color="State_Name")

df_['Efficiency'] = df_['Production'] / df_['Area']

px.scatter(df_, x="Area", y="Efficiency", size="Production", animation_frame="Crop_Year",
           animation_group="State_Name", color="State_Name", range_y = [0.75, 5], range_x=[-1E6, 20E6])

px.scatter(df_, x="Area", y="Efficiency", size="Production", animation_frame="Crop_Year",
           animation_group="State_Name", color="State_Name", range_y = [0.75, 5], range_x=[-1E6, 20E6])

